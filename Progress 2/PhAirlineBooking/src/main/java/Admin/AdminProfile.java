package Admin;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.*;
import connectors.dbconnect;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;

public class AdminProfile extends javax.swing.JPanel {

    private DefaultListModel<String> systemHistoryModel;
    private JList<String> systemHistoryList;
    private Connection conn;
    private int adminId;

    public AdminProfile() {
        initComponents();
        dbconnect dbc = new dbconnect();
        conn = dbc.getConnection();
        setupSystemHistory();
        setupAdminHistory();
    }
    
    public AdminProfile(int adminId) {
        this();
        this.adminId = adminId;
        loadAdminInfo(); // Call loadAdminInfo after setting adminId
    }

    public void setAdminId(int adminId) {
        this.adminId = adminId;
        loadAdminInfo(); // Call loadAdminInfo when adminId is set
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AdminHistory = new javax.swing.JPanel();
        SystemHistory = new javax.swing.JPanel();
        Username = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout AdminHistoryLayout = new javax.swing.GroupLayout(AdminHistory);
        AdminHistory.setLayout(AdminHistoryLayout);
        AdminHistoryLayout.setHorizontalGroup(
            AdminHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        AdminHistoryLayout.setVerticalGroup(
            AdminHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        add(AdminHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 380, 190));

        javax.swing.GroupLayout SystemHistoryLayout = new javax.swing.GroupLayout(SystemHistory);
        SystemHistory.setLayout(SystemHistoryLayout);
        SystemHistoryLayout.setHorizontalGroup(
            SystemHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        SystemHistoryLayout.setVerticalGroup(
            SystemHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        add(SystemHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 380, 210));
        add(Username, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 110, 240, 40));

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 240, 40));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Username");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Password");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, 80, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("SYSTEM HISTORY");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("ADMIN HISTORY");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 260, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed

    private void setupSystemHistory() {
        systemHistoryModel = new DefaultListModel<>();
        systemHistoryList = new JList<>(systemHistoryModel);
        systemHistoryList.setFont(new java.awt.Font("Segoe UI", 0, 14));
        systemHistoryList.setBackground(new java.awt.Color(245, 245, 245));

        JScrollPane scrollPane = new JScrollPane(systemHistoryList);
        SystemHistory.setLayout(new java.awt.BorderLayout());
        SystemHistory.add(scrollPane, java.awt.BorderLayout.CENTER);

        
        try {
            dbconnect dbc = new dbconnect();
            java.sql.Connection conn = dbc.getConnection();
            String query = "SELECT action_description, timestamp FROM audit_log ORDER BY timestamp DESC";
            java.sql.PreparedStatement pst = conn.prepareStatement(query);
            java.sql.ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                String desc = rs.getString("action_description");
                java.sql.Timestamp time = rs.getTimestamp("timestamp");
                if (desc == null || desc.trim().isEmpty()) {
                    desc = "No description";
                }
                systemHistoryModel.addElement(desc + " at " + time);
            }
            rs.close();
            pst.close();
            conn.close();
        } catch (Exception ex) {
            systemHistoryModel.addElement("Could not load system history: " + ex.getMessage());
        }
    }

    private void setupAdminHistory() {
        DefaultListModel<String> adminHistoryModel = new DefaultListModel<>();
        JList<String> adminHistoryList = new JList<>(adminHistoryModel);
        adminHistoryList.setFont(new java.awt.Font("Segoe UI", 0, 14));
        adminHistoryList.setBackground(new java.awt.Color(245, 245, 245));

        JScrollPane scrollPane = new JScrollPane(adminHistoryList);
        AdminHistory.setLayout(new java.awt.BorderLayout());
        AdminHistory.add(scrollPane, java.awt.BorderLayout.CENTER);

        
        try {
            dbconnect dbc = new dbconnect();
            java.sql.Connection conn = dbc.getConnection();
            String query = "SELECT a.username, l.action_type, l.action_description, l.timestamp " +
                           "FROM audit_log l " +
                           "JOIN admin a ON l.admin_id = a.admin_id " +
                           "WHERE l.admin_id IS NOT NULL AND l.table_name = 'customer' " +
                           "ORDER BY l.timestamp DESC";
            java.sql.PreparedStatement pst = conn.prepareStatement(query);
            java.sql.ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                String username = rs.getString("username");
                String actionType = rs.getString("action_type");
                String desc = rs.getString("action_description");
                java.sql.Timestamp time = rs.getTimestamp("timestamp");
                if (desc == null || desc.trim().isEmpty()) {
                    desc = "No description";
                }
                adminHistoryModel.addElement("Admin '" + username + "' [" + actionType + "]: " + desc + " at " + time);
            }
            rs.close();
            pst.close();
            conn.close();
        } catch (Exception ex) {
            adminHistoryModel.addElement("Could not load admin history: " + ex.getMessage());
        }
    }

    // Call this method from anywhere in your app when an account is created
    public void notifyAccountCreated(String username) {
        systemHistoryModel.addElement("Account created: " + username + " at " + new java.util.Date());
    }

   private void loadAdminInfo() {
    if (adminId <= 0) {
        Username.setText("Invalid Admin ID");
        password.setText("Invalid Admin ID");
        JOptionPane.showMessageDialog(this, "Admin ID is not set or invalid.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        dbconnect dbc = new dbconnect();
        Connection conn = dbc.getConnection();
        if (conn == null) {
            throw new SQLException("Failed to establish database connection");
        }

        String query = "SELECT username, password FROM admin WHERE admin_id = ?";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setInt(1, adminId);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            Username.setText(rs.getString("username"));
            password.setText(rs.getString("password"));
            Username.setEditable(false);
            password.setEditable(false);
        } else {
            Username.setText("Admin not found");
            password.setText("Admin not found");
            JOptionPane.showMessageDialog(this, "No admin found with ID: " + adminId, "Error", JOptionPane.ERROR_MESSAGE);
        }

        rs.close();
        pst.close();
        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace(); // Log the exception for debugging
        Username.setText("Error loading admin info");
        password.setText("Error loading admin info");
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        ex.printStackTrace(); // Log unexpected errors
        Username.setText("Unexpected error");
        password.setText("Unexpected error");
        JOptionPane.showMessageDialog(this, "Unexpected error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdminHistory;
    private javax.swing.JPanel SystemHistory;
    private javax.swing.JTextField Username;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField password;
    // End of variables declaration//GEN-END:variables
}
